esphome:
  name: kitchen-detectorer
  friendly_name: Kitchen Detectorer

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  encryption:
    key: dpYQhtTju8d7cHiHRC44cizLbJtp1a+LqJRLkznX39A=

ota:
  platform: esphome
  password: !secret esphome_password

# GPIO pin to power the microphone
output:
  - platform: gpio
    pin: GPIO4
    id: mic_power
    inverted: false

switch:
  - platform: output
    name: "Microphone Power"
    output: mic_power
    id: mic_power_switch
    restore_mode: ALWAYS_ON
    internal: true

i2s_audio:
  i2s_lrclk_pin: GPIO15
  i2s_bclk_pin: GPIO14

microphone:
  platform: i2s_audio
  id: mic
  i2s_din_pin: GPIO32
  adc_type: external
  sample_rate: 16000

sensor:
  - platform: ultrasonic
    trigger_pin: GPIO12
    echo_pin: GPIO13
    name: "Espresso Bean Level"
    unit_of_measurement: "cm"
    update_interval: 1s
    filters:
      - median:
          window_size: 5
          send_every: 1
          send_first_at: 1
    id: espresso_bean_level

  # Home Assistant sensors
  - platform: homeassistant
    id: airfryer_power
    entity_id: sensor.energy_monitoring_smartplug_power
    internal: true
  - platform: homeassistant
    id: bio_temp
    entity_id: sensor.bioofficec3_room_temperature
    internal: true
  - platform: homeassistant
    id: outside_temp
    entity_id: sensor.sam_outside_temperature
    internal: true
  - platform: homeassistant
    id: inside_temp
    entity_id: sensor.t_h_sensor_temperature
    internal: true
  - platform: homeassistant
    id: inside_humidity
    entity_id: sensor.t_h_sensor_humidity
    internal: true
  - platform: homeassistant
    id: power_price
    entity_id: sensor.nordpool_kwh_se4_sek_3_10_025
    internal: true

text_sensor:
  - platform: homeassistant
    id: felix_calendar_event
    entity_id: calendar.handl_f
    internal: true

# Globals for calibration, display, and button states
globals:
  - id: cal_mode
    type: int
    restore_value: no
    initial_value: "0"
  - id: full_dist
    type: float
    restore_value: no
    initial_value: "0.0"
  - id: fifty_dist
    type: float
    restore_value: no
    initial_value: "0.0"
  - id: empty_dist
    type: float
    restore_value: no
    initial_value: "0.0"
  - id: current_screen
    type: int
    restore_value: no
    initial_value: "0"
  - id: last_screen_change
    type: unsigned long
    restore_value: no
    initial_value: "0"
  - id: button_press_time
    type: unsigned long
    restore_value: no
    initial_value: "0"
  - id: button_pressed
    type: bool
    restore_value: no
    initial_value: "false"

binary_sensor:
  
  - platform: template
    name: "Airfryer Beep"
    id: airfryer_beep
    lambda: |-
      // Placeholder for beep detection (tune with your data)
      if (id(mic).is_running()) {
        // Example: Detect high amplitude in 1-3 kHz range
        // Requires FFT or amplitude check
        return false;  // Replace with tuned logic
      }
      return false;
    on_press:
      # Flash flood light green for 2 seconds
      - homeassistant.service:
          service: light.turn_on
          data:
            entity_id: "light.led_flood_light"
            rgb_color: "[0, 255, 0]"
            brightness: "255"
      - delay: 2s
      - homeassistant.service:
          service: light.turn_off
          data:
            entity_id: "light.led_flood_light"
      - homeassistant.service:
          service: notify.mobile_app
          data:
            message: "Airfryer is beeping! Check for shaking reminder."
  
  # Home Assistant binary sensors/switches
  - platform: homeassistant
    id: bio_heaters
    entity_id: switch.bio_office_heaters_socket_1
    internal: true
  - platform: homeassistant
    id: hot_water
    entity_id: switch.smart_plug_2_socket_1
    internal: true
  - platform: homeassistant
    id: power_price_is_low
    entity_id: sensor.nordpool_kwh_se4_sek_3_10_025
    attribute: low_price
    internal: true
  
  # TM1638 Buttons (Button 1-4 for toggles, 5-8 available for future use)
  - platform: tm1638
    name: "Button 1"
    id: button_1
    key: 0
    on_press:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: light.bio_office
      - lambda: |-
          id(button_pressed) = true;
          id(button_press_time) = millis();
  
  - platform: tm1638
    name: "Button 2"
    id: button_2
    key: 1
    on_press:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: light.living_room
      - lambda: |-
          id(button_pressed) = true;
          id(button_press_time) = millis();
  
  - platform: tm1638
    name: "Button 3"
    id: button_3
    key: 2
    on_press:
      - homeassistant.service:
          service: light.toggle
          data:
            entity_id: light.bedroom
      - lambda: |-
          id(button_pressed) = true;
          id(button_press_time) = millis();
  
  - platform: tm1638
    name: "Button 4"
    id: button_4
    key: 3
    on_press:
      - homeassistant.service:
          service: switch.toggle
          data:
            entity_id: switch.smart_plug_2_socket_1
      - lambda: |-
          id(button_pressed) = true;
          id(button_press_time) = millis();
  
  # Buttons 5-7 available for future expansion
  - platform: tm1638
    name: "Button 5"
    id: button_5
    key: 4
  - platform: tm1638
    name: "Button 6"
    id: button_6
    key: 5
  - platform: tm1638
    name: "Button 7"
    id: button_7
    key: 6
  
  # Button 8 for calibration
  - platform: tm1638
    name: "Button 8 - Calibration"
    id: button_8
    key: 7
    on_press:
      - lambda: |-
          if (id(cal_mode) == 0) {
            id(cal_mode) = 1;  // Start ultrasonic calibration
          } else if (id(cal_mode) == 1) {
            id(empty_dist) = id(espresso_bean_level).state;  // Save empty level (first)
            id(cal_mode) = 2;  // Move to 50g level
          } else if (id(cal_mode) == 2) {
            id(fifty_dist) = id(espresso_bean_level).state;  // Save 50g level
            id(cal_mode) = 3;  // Move to full level
          } else if (id(cal_mode) == 3) {
            id(full_dist) = id(espresso_bean_level).state;  // Save full level (last)
            id(cal_mode) = 4;  // Move to beep calibration
          } else if (id(cal_mode) == 4) {
            id(cal_mode) = 5;  // Save beep sample (placeholder)
          } else if (id(cal_mode) == 5) {
            id(cal_mode) = 0;  // Return to idle
          }

# TM1638 Display Configuration
display:
  - platform: tm1638
    id: tm_display
    stb_pin: GPIO5
    clk_pin: GPIO18
    dio_pin: GPIO17
    update_interval: 500ms
    intensity: 7
    lambda: |-
      // Calibration mode display - takes priority
      if (id(cal_mode) > 0) {
        // Turn off all LEDs except LED8 (index 7) during calibration
        for (int i = 0; i < 7; i++) {
          it.set_led(i, false);
        }
        it.set_led(7, true);  // LED8 on during calibration
        
        if (id(cal_mode) == 1) {
          it.print("caL");
          it.printf(4, "Enpty");
        } else if (id(cal_mode) == 2) {
          it.print("caL");
          it.printf(4, " 50g");
        } else if (id(cal_mode) == 3) {
          it.print("caL");
          it.printf(4, "fuLL");
        } else if (id(cal_mode) == 4) {
          it.print("caL");
          it.printf(4, "beep");
        } else if (id(cal_mode) == 5) {
          it.print("done");
          it.printf(4, "    ");
        }
        return;
      }
      
      // Screen auto-cycling every 3.5 seconds
      if (millis() - id(last_screen_change) > 3500) {
        id(current_screen) = (id(current_screen) + 1) % 10;  // 0-9 screens (added calendar)
        // Skip air fryer screen (0) if power is 0 or unavailable
        if (id(current_screen) == 0) {
          if (!id(airfryer_power).has_state() || id(airfryer_power).state <= 0) {
            id(current_screen) = 1;  // Skip to next screen
          }
        }
        // Skip calendar screen (9) if no relevant events
        if (id(current_screen) == 9) {
          auto time_now = id(homeassistant_time).now();
          if (!time_now.is_valid() || !id(felix_calendar_event).has_state()) {
            id(current_screen) = 0;  // Skip to next screen cycle
          } else {
            std::string event = id(felix_calendar_event).state;
            bool show_felix = false;
            bool show_isolde = false;
            
            // Check for Felix events (8am) - show from 6pm day before until 8am
            if (event.find("Felix") == 0) {
              // Show from 18:00 previous day until 08:00 event day
              show_felix = true;  // Simplified - would need more complex time checking
            }
            // Check for Ridlekis Isolde on Saturdays at 9:30am
            if (time_now.day_of_week == 6 && event.find("Ridlekis Isolde") == 0) {
              show_isolde = true;
            }
            
            if (!show_felix && !show_isolde) {
              id(current_screen) = 0;  // Skip calendar screen
            }
          }
        }
        id(last_screen_change) = millis();
      }
      
      // If button pressed, show On/Off for 1 second
      if (id(button_pressed) && millis() - id(button_press_time) < 1000) {
        it.print("  on  ");  // Placeholder - will be updated based on actual state
        return;
      } else {
        id(button_pressed) = false;
      }
      
      // Turn off all LEDs first
      for (int i = 0; i < 8; i++) {
        it.set_led(i, false);
      }
      
      // Clear display
      it.print("        ");  // 8 spaces to clear all digits
      
      // Display based on current screen
      if (id(current_screen) == 0) {
        // Screen 0: Air Fryer Power (LED1 when >0, only shown when power > 0)
        it.print("AirW");
        if (id(airfryer_power).has_state()) {
          int power = (int)id(airfryer_power).state;  // Display whole watts only
          it.printf(4, "%d", power);
          if (power > 0) {
            it.set_led(0, true);  // LED1
          }
        } else {
          it.print(4, " --");
        }
      } else if (id(current_screen) == 1) {
        // Screen 1: Bio Office - heater status on left, temperature on right, LED2 on
        it.set_led(1, true);  // LED2
        if (id(bio_heaters).has_state() && id(bio_heaters).state) {
          it.print(" on ");
        } else {
          it.print(" off");
        }
        if (id(bio_temp).has_state()) {
          it.printf(4, "%.1fC", id(bio_temp).state);
        } else {
          it.print(4, " ---");
        }
      } else if (id(current_screen) == 2) {
        // Screen 2: Hot Water Status
        it.print("hot ");
        if (id(hot_water).has_state() && id(hot_water).state) {
          it.printf(4, " on ");
        } else {
          it.printf(4, " off");
        }
      } else if (id(current_screen) == 3) {
        // Screen 3: Outside Temperature
        it.print("out ");
        if (id(outside_temp).has_state()) {
          it.printf(4, "%.1fC", id(outside_temp).state);
        } else {
          it.print(4, " --C");
        }
      } else if (id(current_screen) == 4) {
        // Screen 4: Inside Temperature
        it.print("in  ");
        if (id(inside_temp).has_state()) {
          it.printf(4, "%.1fC", id(inside_temp).state);
        } else {
          it.print(4, " --C");
        }
      } else if (id(current_screen) == 5) {
        // Screen 5: Inside Humidity
        it.print("in h");
        if (id(inside_humidity).has_state()) {
          it.printf(4, "%.1f", id(inside_humidity).state);
        } else {
          it.print(4, " --");
        }
      } else if (id(current_screen) == 6) {
        // Screen 6: Power Price (LED3 on, show price on left, Lo/High on right)
        it.set_led(2, true);  // LED3
        if (id(power_price).has_state()) {
          it.printf("%.2f", id(power_price).state);
          if (id(power_price_is_low).has_state() && id(power_price_is_low).state) {
            it.print(4, "  Lo");
          } else {
            it.print(4, "High");
          }
        } else {
          it.print(" ---");
        }
      } else if (id(current_screen) == 7) {
        // Screen 7: Coffee Bean Level
        float threshold = id(full_dist) + (id(empty_dist) - id(full_dist)) * 0.2;
        if (id(espresso_bean_level).state > threshold && id(espresso_bean_level).state > 0) {
          it.print("beanLo");
          it.set_led(3, true);  // Warning LED
        } else {
          it.print("beanok");
        }
        it.printf(4, "%.1f", id(espresso_bean_level).state);
      } else if (id(current_screen) == 8) {
        // Screen 8: Date and Time
        auto time = id(homeassistant_time).now();
        if (time.is_valid()) {
          it.printf("%02d.%02d", time.day_of_month, time.month);
          it.printf(4, "%02d.%02d", time.hour, time.minute);
        } else {
          it.print("--.--.--");
        }
      } else if (id(current_screen) == 9) {
        // Screen 9: Calendar Events (Felix activities, Isolde riding)
        if (id(felix_calendar_event).has_state()) {
          std::string event = id(felix_calendar_event).state;
          
          // Check for Felix events and shorten
          if (event.find("Felix Swim") == 0) {
            it.print("F. Swim");
          } else if (event.find("Felix Idrott") == 0) {
            it.print("F.   PE");
          } else if (event.find("Ridlekis Isolde") == 0) {
            it.print("Riding");
            it.printf(4, "930");
          } else {
            // Generic Felix event
            if (event.find("Felix") == 0) {
              it.print("F.");
              if (event.length() > 6) {
                it.printf(4, event.substr(6, 4).c_str());
              }
            }
          }
          it.set_led(4, true);  // LED5 for calendar alerts
        }
      }

# Time component for date/time display
time:
  - platform: homeassistant
    id: homeassistant_time

# Bluetooth Proxy (extends HA BLE range)
bluetooth_proxy:
  active: true