[
	{
		"id": "8eeda7c0e58ce6fe",
		"type": "subflow",
		"name": "Get Entity State REST (1)",
		"info": "",
		"category": "",
		"in": [
			{
				"x": 60,
				"y": 80,
				"wires": [
					{
						"id": "a5aa4552a9041489"
					}
				]
			}
		],
		"out": [
			{
				"x": 780,
				"y": 180,
				"wires": [
					{
						"id": "160a4587c18d0c1b",
						"port": 0
					}
				]
			}
		],
		"env": [
			{
				"name": "HA_API_URL",
				"type": "str",
				"value": "http://localhost:8123/api"
			},
			{
				"name": "HA_API_TOKEN",
				"type": "str",
				"value": "your-api-token-here"
			}
		],
		"meta": {},
		"color": "#DDAA99"
	},
	{
		"id": "a5aa4552a9041489",
		"type": "change",
		"z": "8eeda7c0e58ce6fe",
		"name": "Set API URL",
		"rules": [
			{
				"t": "set",
				"p": "url",
				"pt": "msg",
				"to": "$env('HA_API_URL') & \"/states/\" & $$.entity_id",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "headers",
				"pt": "msg",
				"to": "{\"Authorization\": \"Bearer \" & $env('HA_API_TOKEN'), \"Content-Type\": \"application/json\"}",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 350,
		"y": 80,
		"wires": [
			[
				"5492124e34b71983"
			]
		]
	},
	{
		"id": "5492124e34b71983",
		"type": "http request",
		"z": "8eeda7c0e58ce6fe",
		"name": "",
		"method": "GET",
		"ret": "obj",
		"paytoqs": "ignore",
		"url": "",
		"tls": "",
		"persist": false,
		"proxy": "",
		"insecureHTTPParser": false,
		"authType": "",
		"senderr": false,
		"headers": [],
		"x": 550,
		"y": 100,
		"wires": [
			[
				"160a4587c18d0c1b"
			]
		]
	},
	{
		"id": "160a4587c18d0c1b",
		"type": "change",
		"z": "8eeda7c0e58ce6fe",
		"name": "Parse Response",
		"rules": [
			{
				"t": "set",
				"p": "attributes",
				"pt": "msg",
				"to": "$exists(payload.attributes)? payload.attributes: {}",
				"tot": "jsonata",
				"dc": true
			},
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "payload.state",
				"tot": "msg"
			},
			{
				"t": "set",
				"p": "data",
				"pt": "msg",
				"to": "$exists(data)? data: {}\t",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 490,
		"y": 260,
		"wires": [
			[]
		]
	},
	{
		"id": "d8cfddba5c4a2613",
		"type": "tab",
		"label": "Flow 2",
		"disabled": false,
		"info": "",
		"env": []
	},
	{
		"id": "bcca4591652a9a9c",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "Light ON/OFF",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "ON",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "OFF",
				"vt": "str"
			}
		],
		"repair": false,
		"outputs": 2,
		"x": 660,
		"y": 160,
		"wires": [
			[
				"c3a4ccf9653e75e5"
			],
			[
				"7700d65d9dba2ad8"
			]
		]
	},
	{
		"id": "c3a4ccf9653e75e5",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn On Light",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "light.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "light",
		"service": "turn_on",
		"x": 840,
		"y": 120,
		"wires": [
			[]
		]
	},
	{
		"id": "7700d65d9dba2ad8",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn Off Light",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "light.turn_off",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "light",
		"service": "turn_off",
		"x": 840,
		"y": 160,
		"wires": [
			[]
		]
	},
	{
		"id": "8d90f016acba65ba",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "TV ON/OFF/PlayPause",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "ON",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "OFF",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "PLAYPAUSE",
				"vt": "str"
			}
		],
		"repair": false,
		"outputs": 3,
		"x": 790,
		"y": 300,
		"wires": [
			[
				"2412319021d44ed9"
			],
			[
				"6f2dfaa86ae14971"
			],
			[
				"37427b4640c34f47"
			]
		]
	},
	{
		"id": "2412319021d44ed9",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn On TV",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "media_player.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "media_player",
		"service": "turn_on",
		"x": 1010,
		"y": 240,
		"wires": [
			[]
		]
	},
	{
		"id": "6f2dfaa86ae14971",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn Off TV",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "media_player.turn_off",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "media_player",
		"service": "turn_off",
		"x": 1010,
		"y": 300,
		"wires": [
			[]
		]
	},
	{
		"id": "d3d35bcc1129175a",
		"type": "mqtt in",
		"z": "d8cfddba5c4a2613",
		"name": "Request State",
		"topic": "homeassistant/+/+/request_state",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 110,
		"y": 920,
		"wires": [
			[
				"f382a665acab5ad4"
			]
		]
	},
	{
		"id": "f382a665acab5ad4",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Extract Entity (Request)",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "$split(topic, \"/\")[2]",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "domain",
				"pt": "msg",
				"to": "$split(topic, \"/\")[1]",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 350,
		"y": 920,
		"wires": [
			[
				"509bc3efd8427eb2",
				"8f3a918de72c3a17"
			]
		]
	},
	{
		"id": "1442b1d5bf52d364",
		"type": "mqtt in",
		"z": "d8cfddba5c4a2613",
		"name": "All Commands In",
		"topic": "homeassistant/+/+/+",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 110,
		"y": 120,
		"wires": [
			[
				"d197969716f5c37a",
				"bebd60bc52d08c47"
			]
		]
	},
	{
		"id": "bebd60bc52d08c47",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Parse Topic",
		"rules": [
			{
				"t": "set",
				"p": "topicParts",
				"pt": "msg",
				"to": "$split(topic, \"/\")",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "haDomain",
				"pt": "msg",
				"to": "topicParts[1]",
				"tot": "msg"
			},
			{
				"t": "set",
				"p": "isComputer",
				"pt": "msg",
				"to": "haDomain = \"button\" or haDomain = \"switch\"",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "computerName",
				"pt": "msg",
				"to": "isComputer ? topicParts[2] : undefined",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "fullAction",
				"pt": "msg",
				"to": "isComputer ? topicParts[3] : undefined",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "actionVerb",
				"pt": "msg",
				"to": "isComputer ? topicParts[4] : undefined",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "actionDetail",
				"pt": "msg",
				"to": "isComputer ? $split(fullAction, \"_\")[1] : (haDomain = \"computer\" ? topicParts[3] : undefined)",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "isComputer ? \"computer.\" & computerName : topicParts[2]",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "domain",
				"pt": "msg",
				"to": "isComputer ? \"computer\" : haDomain",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "command",
				"pt": "msg",
				"to": "isComputer ? actionVerb : topicParts[3]",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 340,
		"y": 180,
		"wires": [
			[
				"dded65855dd56ede"
			]
		]
	},
	{
		"id": "fc8bd137bdfe24b1",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Set Brightness",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "light.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id, \"brightness\": $number($$.payload)}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "light",
		"service": "turn_on",
		"x": 660,
		"y": 80,
		"wires": [
			[]
		]
	},
	{
		"id": "9a0c93491f840960",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Set HS",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "light.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id, \"hs_color\": [$split($$.payload, \",\")[0], $split($$.payload, \",\")[1]]}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "light",
		"service": "turn_on",
		"x": 640,
		"y": 120,
		"wires": [
			[]
		]
	},
	{
		"id": "ac4020b8e45c8584",
		"type": "function",
		"z": "d8cfddba5c4a2613",
		"name": "Combine Response",
		"func": "// Check if this is a computer entity\nif (msg.entity_id && msg.entity_id.startsWith(\"computer.\")) {\n    const computerName = msg.entity_id.split(\".\")[1].toLowerCase();\n    \n    // Create multiple MQTT messages for different computer attributes\n    const messages = [];\n    \n    // Session state\n    messages.push({\n        topic: `homeassistant/sensor/${computerName}/${computerName}_sessionstate/state`,\n        payload: msg.payload, // on/off/locked/unlocked\n        qos: 2\n    });\n    \n    // Current volume\n    if (msg.attributes.volume_level !== undefined) {\n        const volumeLevel = Math.round(msg.attributes.volume_level * 100);\n        messages.push({\n            topic: `homeassistant/sensor/${computerName}/${computerName}_currentvolume/state`,\n            payload: volumeLevel.toString(),\n            qos: 2\n        });\n    }\n    \n    // Active window\n    if (msg.attributes.activewindow !== undefined) {\n        messages.push({\n            topic: `homeassistant/sensor/${computerName}/${computerName}_activewindow/state`,\n            payload: msg.attributes.activewindow,\n            qos: 2\n        });\n    }\n    \n    // Enforce lock state\n    if (msg.attributes.enforce_lock !== undefined) {\n        messages.push({\n            topic: `homeassistant/switch/${computerName}/${computerName}_enforce_lock/state`,\n            payload: msg.attributes.enforce_lock ? \"ON\" : \"OFF\",\n            qos: 2\n        });\n    }\n    \n    return [messages];\n} else {\n    // Handle traditional entities (light and media_player)\n    msg.payload = {\n        \"entity_id\": msg.entity_id,\n        \"state\": msg.payload,\n        \"brightness\": msg.attributes.brightness || null,\n        \"hs_color\": msg.attributes.hs_color || null,\n        \"volume_level\": msg.attributes.volume_level || null,\n        \"source\": msg.attributes.source || null\n    };\n    msg.topic = \"homeassistant/\" + msg.domain + \"/\" + msg.entity_id + \"/update\";\n    return msg;\n}",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 830,
		"y": 820,
		"wires": [
			[
				"87a328ed1f41e601",
				"fa1e5e8317bec211"
			]
		]
	},
	{
		"id": "87a328ed1f41e601",
		"type": "mqtt out",
		"z": "d8cfddba5c4a2613",
		"name": "Publish State",
		"topic": "",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 1070,
		"y": 820,
		"wires": []
	},
	{
		"id": "fa1e5e8317bec211",
		"type": "debug",
		"z": "d8cfddba5c4a2613",
		"name": "Publish Debug",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"targetType": "full",
		"statusVal": "",
		"statusType": "auto",
		"x": 960,
		"y": 760,
		"wires": []
	},
	{
		"id": "c138b291745f66fb",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Set Volume",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "media_player.volume_set",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id, \"volume_level\": $number($$.payload)}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "media_player",
		"service": "volume_set",
		"x": 790,
		"y": 200,
		"wires": [
			[]
		]
	},
	{
		"id": "53e922b7ebc3d666",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Select Source",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "media_player.select_source",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id, \"source\": $$.payload}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "media_player",
		"service": "select_source",
		"x": 780,
		"y": 240,
		"wires": [
			[]
		]
	},
	{
		"id": "dded65855dd56ede",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "Check Domain/Type",
		"property": "domain",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "light",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "media_player",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "computer",
				"vt": "str"
			}
		],
		"checkall": "false",
		"repair": false,
		"outputs": 3,
		"x": 150,
		"y": 280,
		"wires": [
			[
				"6f85c3be63919028"
			],
			[
				"2698c4764126e54c"
			],
			[
				"f5c1a2e8d3b4f5a6"
			]
		]
	},
	{
		"id": "37427b4640c34f47",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "PlayPause",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "media_player.media_play_pause",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "media_player",
		"service": "media_play_pause",
		"x": 1010,
		"y": 360,
		"wires": [
			[]
		]
	},
	{
		"id": "fabe9b290af3c3e3",
		"type": "server-state-changed",
		"z": "d8cfddba5c4a2613",
		"name": "State Changes",
		"server": "c8bf64e0.ee9788",
		"version": 6,
		"outputs": 2,
		"exposeAsEntityConfig": "",
		"entities": [
			{
				"entityId": "light.gold_light",
				"entityIdType": "exact"
			},
			{
				"entityId": "light.led_flood_light",
				"entityIdType": "exact"
			},
			{
				"entityId": "light.bio_floodlight",
				"entityIdType": "exact"
			},
			{
				"entityId": "media_player.lgnano_55",
				"entityIdType": "exact"
			},
			{
				"entityId": "computer.felixlaptop",
				"entityIdType": "exact"
			},
			{
				"entityId": "sensor.felixlaptop_felixlaptop_currentvolume",
				"entityIdType": "exact"
			},
			{
				"entityId": "sensor.felixlaptop_felixlaptop_activewindow",
				"entityIdType": "exact"
			},
			{
				"entityId": "sensor.felixlaptop_felixlaptop_sessionstate",
				"entityIdType": "exact"
			},
			{
				"entityId": "switch.felixlaptop_felixlaptop_enforce_lock",
				"entityIdType": "exact"
			}
		],
		"outputInitially": false,
		"stateType": "str",
		"ifState": "",
		"ifStateType": "str",
		"ifStateOperator": "is",
		"outputOnlyOnStateChange": true,
		"for": "0",
		"forType": "num",
		"forUnits": "minutes",
		"ignorePrevStateNull": false,
		"ignorePrevStateUnknown": false,
		"ignorePrevStateUnavailable": false,
		"ignoreCurrentStateUnknown": false,
		"ignoreCurrentStateUnavailable": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "entityState"
			},
			{
				"property": "data",
				"propertyType": "msg",
				"value": "",
				"valueType": "eventData"
			},
			{
				"property": "topic",
				"propertyType": "msg",
				"value": "",
				"valueType": "triggerId"
			},
			{
				"property": "entity_id",
				"propertyType": "msg",
				"value": "",
				"valueType": "triggerId"
			}
		],
		"x": 300,
		"y": 840,
		"wires": [
			[
				"509bc3efd8427eb2"
			],
			[
				"8f3a918de72c3a17"
			]
		]
	},
	{
		"id": "6f85c3be63919028",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "Check Light Command",
		"property": "command",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "brightness",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "hs",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "set",
				"vt": "str"
			}
		],
		"checkall": "false",
		"repair": false,
		"outputs": 3,
		"x": 410,
		"y": 140,
		"wires": [
			[
				"fc8bd137bdfe24b1"
			],
			[
				"9a0c93491f840960"
			],
			[
				"bcca4591652a9a9c"
			]
		]
	},
	{
		"id": "2698c4764126e54c",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "Check Media Command",
		"property": "command",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "volume",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "source",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "set",
				"vt": "str"
			}
		],
		"checkall": "true",
		"repair": false,
		"outputs": 3,
		"x": 430,
		"y": 240,
		"wires": [
			[
				"c138b291745f66fb"
			],
			[
				"53e922b7ebc3d666"
			],
			[
				"8d90f016acba65ba"
			]
		]
	},
	{
		"id": "509bc3efd8427eb2",
		"type": "subflow:8eeda7c0e58ce6fe",
		"z": "d8cfddba5c4a2613",
		"name": "Get HA State",
		"env": [
			{
				"name": "HA_API_TOKEN",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiI0OTViZjZjMTkzN2U0YzYwOTc0ZmM2NTgxMWRkZTdlZiIsImlhdCI6MTc0NTQ5MzQ0NiwiZXhwIjoyMDYwODUzNDQ2fQ.kIOvABiiXHF0mmd8BPMt-FJCmPJ8MrkmoGtzEkXp-AU",
				"type": "str"
			}
		],
		"x": 580,
		"y": 820,
		"wires": [
			[
				"ac4020b8e45c8584"
			]
		]
	},
	{
		"id": "9245ffd4161179ba",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "ON/OFF",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "ON",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "OFF",
				"vt": "str"
			}
		],
		"checkall": "false",
		"repair": false,
		"outputs": 2,
		"x": 760,
		"y": 420,
		"wires": [
			[
				"9e73379bad43ad38"
			],
			[
				"7c8edd2eb8bbf815"
			]
		]
	},
	{
		"id": "9e73379bad43ad38",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn On Computer",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "switch.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "switch",
		"service": "turn_on",
		"x": 940,
		"y": 400,
		"wires": [
			[]
		]
	},
	{
		"id": "7c8edd2eb8bbf815",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Turn Off Computer",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "switch.turn_off",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "switch",
		"service": "turn_off",
		"x": 940,
		"y": 440,
		"wires": [
			[]
		]
	},
	{
		"id": "80a17a97a77da1b0",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Press Lock Button",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "button.press",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "button",
		"service": "press",
		"x": 730,
		"y": 480,
		"wires": [
			[]
		]
	},
	{
		"id": "23eb2d487e66fa9f",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Press Mute Button",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "button.press",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "button",
		"service": "press",
		"x": 730,
		"y": 520,
		"wires": [
			[]
		]
	},
	{
		"id": "0af2c78096e77150",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Press SetVolume Button",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "button.press",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "button",
		"service": "press",
		"x": 750,
		"y": 560,
		"wires": [
			[]
		]
	},
	{
		"id": "d197969716f5c37a",
		"type": "debug",
		"z": "d8cfddba5c4a2613",
		"name": "MQTT In Debug",
		"active": true,
		"tosidebar": true,
		"console": false,
		"tostatus": false,
		"complete": "true",
		"targetType": "full",
		"statusVal": "",
		"statusType": "auto",
		"x": 110,
		"y": 60,
		"wires": []
	},
	{
		"id": "f5c1a2e8d3b4f5a6",
		"type": "switch",
		"z": "d8cfddba5c4a2613",
		"name": "Check Computer Action",
		"property": "actionDetail",
		"propertyType": "msg",
		"rules": [
			{
				"t": "eq",
				"v": "lock",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "mute",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "setvolume",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "power",
				"vt": "str"
			},
			{
				"t": "eq",
				"v": "enforce_lock",
				"vt": "str"
			}
		],
		"checkall": "false",
		"repair": false,
		"outputs": 5,
		"x": 420,
		"y": 460,
		"wires": [
			[
				"d5e8a1b2c3f4d5e6"
			],
			[
				"a1b2c3d4e5f6a7b8"
			],
			[
				"f1e2d3c4b5a6f7e8"
			],
			[
				"b9a8d7c6e5f4b3a2"
			],
			[
				"c7d6e5f4b3a2c1d0"
			]
		]
	},
	{
		"id": "a18d9f3c28a7d129",
		"type": "api-call-service",
		"z": "d8cfddba5c4a2613",
		"name": "Set Enforce Lock",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "switch.turn_on",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": $$.entity_id}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": true,
		"domain": "switch",
		"service": "turn_{{payload}}",
		"x": 920,
		"y": 600,
		"wires": [
			[]
		]
	},
	{
		"id": "8f3a918de72c3a17",
		"type": "function",
		"z": "d8cfddba5c4a2613",
		"name": "Process Computer Sensor Updates",
		"func": "// Check if it's a direct format entity\nif (msg.entity_id && (msg.entity_id.includes('_currentvolume') || \n                      msg.entity_id.includes('_activewindow') || \n                      msg.entity_id.includes('_sessionstate') || \n                      msg.entity_id.includes('_enforce_lock'))) {\n    \n    // Extract computer name from entity ID\n    const parts = msg.entity_id.split('_');\n    const computerName = parts[0].split('.')[1];\n    \n    // Create the base topic path\n    let topic = '';\n    let payload = msg.payload;\n    \n    // Determine which type of sensor it is\n    if (msg.entity_id.includes('_currentvolume')) {\n        topic = `homeassistant/sensor/${computerName}/${computerName}_currentvolume/state`;\n    } else if (msg.entity_id.includes('_activewindow')) {\n        topic = `homeassistant/sensor/${computerName}/${computerName}_activewindow/state`;\n    } else if (msg.entity_id.includes('_sessionstate')) {\n        topic = `homeassistant/sensor/${computerName}/${computerName}_sessionstate/state`;\n    } else if (msg.entity_id.includes('_enforce_lock')) {\n        topic = `homeassistant/switch/${computerName}/${computerName}_enforce_lock/state`;\n        payload = msg.payload === 'on' ? 'ON' : 'OFF';\n    }\n    \n    if (topic) {\n        return {\n            topic: topic,\n            payload: payload,\n            qos: 2\n        };\n    }\n}\n\nreturn null;",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 550,
		"y": 900,
		"wires": [
			[
				"87a328ed1f41e601"
			]
		]
	},
	{
		"id": "d5e8a1b2c3f4d5e6",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Prep Lock",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "\"button.\" & computerName & \"_\" & computerName & \"_lock\"",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 560,
		"y": 480,
		"wires": [
			[
				"80a17a97a77da1b0"
			]
		]
	},
	{
		"id": "a1b2c3d4e5f6a7b8",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Prep Mute",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "\"button.\" & computerName & \"_\" & computerName & \"_mute\"",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 560,
		"y": 520,
		"wires": [
			[
				"23eb2d487e66fa9f"
			]
		]
	},
	{
		"id": "f1e2d3c4b5a6f7e8",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Prep SetVolume",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "\"button.\" & computerName & \"_\" & computerName & \"_setvolume\"",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "payload",
				"tot": "msg"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 580,
		"y": 560,
		"wires": [
			[
				"0af2c78096e77150"
			]
		]
	},
	{
		"id": "b9a8d7c6e5f4b3a2",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Prep Power",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "\"switch.\" & computerName & \"_\" & computerName & \"_power\"",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "payload",
				"tot": "msg"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 570,
		"y": 420,
		"wires": [
			[
				"9245ffd4161179ba"
			]
		]
	},
	{
		"id": "c7d6e5f4b3a2c1d0",
		"type": "change",
		"z": "d8cfddba5c4a2613",
		"name": "Prep EnforceLock",
		"rules": [
			{
				"t": "set",
				"p": "entity_id",
				"pt": "msg",
				"to": "\"switch.\" & computerName & \"_\" & computerName & \"_enforce_lock\"",
				"tot": "jsonata"
			},
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "$uppercase(payload)",
				"tot": "jsonata"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 590,
		"y": 600,
		"wires": [
			[
				"a18d9f3c28a7d129"
			]
		]
	},
	{
		"id": "c8bf64e0.ee9788",
		"type": "server",
		"name": "Home Assistant",
		"addon": true
	},
	{
		"id": "93e8dd50b41a1c38",
		"type": "mqtt-broker",
		"name": "HA",
		"broker": "localhost",
		"port": 1883,
		"clientid": "",
		"autoConnect": true,
		"usetls": false,
		"protocolVersion": "5",
		"keepalive": 60,
		"cleansession": true,
		"autoUnsubscribe": true,
		"birthTopic": "",
		"birthQos": "0",
		"birthRetain": "false",
		"birthPayload": "",
		"birthMsg": {},
		"closeTopic": "",
		"closeQos": "0",
		"closeRetain": "false",
		"closePayload": "",
		"closeMsg": {},
		"willTopic": "",
		"willQos": "0",
		"willRetain": "false",
		"willPayload": "",
		"willMsg": {},
		"userProps": "",
		"sessionExpiry": ""
	},
	{
		"id": "computer_volume_control",
		"type": "tab",
		"label": "Computer Control",
		"disabled": false,
		"info": "",
		"env": []
	},
	{
		"id": "felixlaptop_volume_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "computer_device_config",
		"name": "FelixLaptop Volume",
		"version": 6,
		"entityType": "number",
		"haConfig": [
			{
				"property": "name",
				"value": "FelixLaptop Volume"
			},
			{
				"property": "icon",
				"value": "mdi:volume-high"
			},
			{
				"property": "entity_category",
				"value": "config"
			},
			{
				"property": "device_class",
				"value": ""
			},
			{
				"property": "unit_of_measurement",
				"value": "%"
			},
			{
				"property": "min_value",
				"value": "0"
			},
			{
				"property": "max_value",
				"value": "100"
			},
			{
				"property": "step_value",
				"value": "1"
			},
			{
				"property": "mode",
				"value": "auto"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "computer_device_config",
		"type": "ha-device-config",
		"name": "FelixLaptop Controller",
		"hwVersion": "",
		"manufacturer": "Node-RED",
		"model": "ESP32 Computer Controller",
		"swVersion": "1.0"
	},
	{
		"id": "felixlaptop_volume_value",
		"type": "ha-number",
		"z": "computer_volume_control",
		"name": "FelixLaptop Volume",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "felixlaptop_volume_entity",
		"exposeAsEntityConfig": "",
		"mode": "both",
		"value": "payload",
		"valueType": "msg",
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "value"
			},
			{
				"property": "previousValue",
				"propertyType": "msg",
				"value": "",
				"valueType": "previousValue"
			}
		],
		"x": 400,
		"y": 80,
		"wires": [
			[
				"volume_action"
			]
		]
	},
	{
		"id": "volume_monitor",
		"type": "mqtt in",
		"z": "computer_volume_control",
		"name": "Volume State",
		"topic": "homeassistant/sensor/felixlaptop/felixlaptop_currentvolume/state",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 150,
		"y": 140,
		"wires": [
			[
				"volume_update"
			]
		]
	},
	{
		"id": "volume_action",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Set Volume",
		"topic": "homeassistant/computer/felixlaptop/volume/action",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 620,
		"y": 80,
		"wires": []
	},
	{
		"id": "volume_update",
		"type": "function",
		"z": "computer_volume_control",
		"name": "Update Volume Entity",
		"func": "// Parse the volume value from the MQTT message\nlet volume = parseInt(msg.payload);\nif (isNaN(volume)) {\n    volume = 0;\n}\n\n// Create message to update the entity\nreturn {\n    payload: volume\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 400,
		"y": 140,
		"wires": [
			[
				"felixlaptop_volume_value"
			]
		]
	},
	{
		"id": "felixlaptop_enforce_lock_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "computer_device_config",
		"name": "FelixLaptop Enforce Lock",
		"version": 6,
		"entityType": "switch",
		"haConfig": [
			{
				"property": "name",
				"value": "FelixLaptop Enforce Lock"
			},
			{
				"property": "icon",
				"value": "mdi:lock"
			},
			{
				"property": "entity_category",
				"value": "config"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "felixlaptop_enforce_lock",
		"type": "ha-switch",
		"z": "computer_volume_control",
		"name": "Enforce Lock",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "felixlaptop_enforce_lock_entity",
		"exposeAsEntityConfig": "",
		"mode": "both",
		"outputAtStartup": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "value"
			},
			{
				"property": "previousValue",
				"propertyType": "msg",
				"value": "",
				"valueType": "previousValue"
			}
		],
		"x": 400,
		"y": 220,
		"wires": [
			[
				"enforce_lock_handler"
			]
		]
	},
	{
		"id": "enforce_lock_monitor",
		"type": "mqtt in",
		"z": "computer_volume_control",
		"name": "Enforce Lock State",
		"topic": "homeassistant/switch/felixlaptop/felixlaptop_enforce_lock/state",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 160,
		"y": 280,
		"wires": [
			[
				"enforce_lock_update"
			]
		]
	},
	{
		"id": "enforce_lock_update",
		"type": "change",
		"z": "computer_volume_control",
		"name": "Format Lock Status",
		"rules": [
			{
				"t": "delete",
				"p": "enforce_state_update",
				"pt": "msg"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 830,
		"y": 660,
		"wires": [
			[
				"felixlaptop_enforce_lock"
			]
		]
	},
	{
		"id": "felixlaptop_mute_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "computer_device_config",
		"name": "FelixLaptop Mute",
		"version": 6,
		"entityType": "button",
		"haConfig": [
			{
				"property": "name",
				"value": "FelixLaptop Mute"
			},
			{
				"property": "icon",
				"value": "mdi:volume-mute"
			},
			{
				"property": "entity_category",
				"value": "config"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "felixlaptop_lock_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "computer_device_config",
		"name": "FelixLaptop Lock",
		"version": 6,
		"entityType": "button",
		"haConfig": [
			{
				"property": "name",
				"value": "FelixLaptop Lock"
			},
			{
				"property": "icon",
				"value": "mdi:laptop-lock"
			},
			{
				"property": "entity_category",
				"value": "config"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "felixlaptop_power_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "computer_device_config",
		"name": "FelixLaptop Power",
		"version": 6,
		"entityType": "switch",
		"haConfig": [
			{
				"property": "name",
				"value": "FelixLaptop Power"
			},
			{
				"property": "icon",
				"value": "mdi:laptop"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "felixlaptop_mute",
		"type": "ha-button",
		"z": "computer_volume_control",
		"name": "Mute",
		"version": 1,
		"debugenabled": false,
		"inputs": 0,
		"outputs": 1,
		"entityConfig": "felixlaptop_mute_entity",
		"exposeAsEntityConfig": "",
		"outputProperties": [],
		"x": 130,
		"y": 360,
		"wires": [
			[
				"mute_action"
			]
		]
	},
	{
		"id": "felixlaptop_lock",
		"type": "ha-button",
		"z": "computer_volume_control",
		"name": "Lock",
		"version": 1,
		"debugenabled": false,
		"inputs": 0,
		"outputs": 1,
		"entityConfig": "felixlaptop_lock_entity",
		"exposeAsEntityConfig": "",
		"outputProperties": [],
		"x": 130,
		"y": 420,
		"wires": [
			[
				"lock_action"
			]
		]
	},
	{
		"id": "felixlaptop_power",
		"type": "ha-switch",
		"z": "computer_volume_control",
		"name": "Power",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "felixlaptop_power_entity",
		"exposeAsEntityConfig": "",
		"mode": "both",
		"outputAtStartup": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "value"
			}
		],
		"x": 130,
		"y": 480,
		"wires": [
			[
				"power_action"
			]
		]
	},
	{
		"id": "mute_action",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Mute",
		"topic": "homeassistant/computer/felixlaptop/mute/press",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 310,
		"y": 360,
		"wires": []
	},
	{
		"id": "lock_action",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Lock",
		"topic": "homeassistant/computer/felixlaptop/lock/press",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 310,
		"y": 420,
		"wires": []
	},
	{
		"id": "power_action",
		"type": "switch",
		"z": "computer_volume_control",
		"name": "ON/OFF",
		"property": "payload",
		"propertyType": "msg",
		"rules": [
			{
				"t": "true"
			},
			{
				"t": "false"
			}
		],
		"checkall": "true",
		"repair": false,
		"outputs": 2,
		"x": 310,
		"y": 480,
		"wires": [
			[
				"power_on"
			],
			[
				"power_off"
			]
		]
	},
	{
		"id": "power_on",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Power ON",
		"topic": "homeassistant/computer/felixlaptop/power/set",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 480,
		"y": 460,
		"wires": []
	},
	{
		"id": "power_off",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Power OFF",
		"topic": "homeassistant/computer/felixlaptop/power/set",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 480,
		"y": 500,
		"wires": []
	},
	{
		"id": "power_on",
		"type": "change",
		"z": "computer_volume_control",
		"name": "ON",
		"rules": [
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "ON",
				"tot": "str"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 450,
		"y": 460,
		"wires": [
			[
				"power_mqtt"
			]
		]
	},
	{
		"id": "power_off",
		"type": "change",
		"z": "computer_volume_control",
		"name": "OFF",
		"rules": [
			{
				"t": "set",
				"p": "payload",
				"pt": "msg",
				"to": "OFF",
				"tot": "str"
			}
		],
		"action": "",
		"property": "",
		"from": "",
		"to": "",
		"reg": false,
		"x": 450,
		"y": 500,
		"wires": [
			[
				"power_mqtt"
			]
		]
	},
	{
		"id": "power_mqtt",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Set Power",
		"topic": "homeassistant/computer/felixlaptop/power/set",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 620,
		"y": 480,
		"wires": []
	},
	{
		"id": "session_state_monitor",
		"type": "mqtt in",
		"z": "computer_volume_control",
		"name": "Session State",
		"topic": "homeassistant/sensor/felixlaptop/felixlaptop_sessionstate/state",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 150,
		"y": 560,
		"wires": [
			[
				"update_power_state",
				"lock_enforcer"
			]
		]
	},
	{
		"id": "update_power_state",
		"type": "function",
		"z": "computer_volume_control",
		"name": "Update Power State",
		"func": "// Update power state based on session state\nconst state = msg.payload;\nlet isPowered = (state !== 'off');\n\nreturn {\n    payload: isPowered\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 400,
		"y": 560,
		"wires": [
			[
				"felixlaptop_power"
			]
		]
	},
	{
		"id": "lock_enforcer",
		"type": "function",
		"z": "computer_volume_control",
		"name": "Check and Enforce Lock",
		"func": "// Store the session state in flow context\nconst sessionState = msg.payload;\nconst enforceEnabled = flow.get('enforce_lock_enabled') || false;\n\n// Store the current session state for other nodes to use\nflow.set('session_state', sessionState);\n\n// Check if we need to enforce lock\nif (enforceEnabled && sessionState === 'unlocked') {\n    // Time since last lock command\n    const lastLockTime = flow.get('last_lock_time') || 0;\n    const now = Date.now();\n    \n    // Only send lock command if more than 10 seconds since last one\n    // to avoid continuous locking attempts\n    if (now - lastLockTime > 10000) {\n        flow.set('last_lock_time', now);\n        return [{\n            payload: \"PRESS\",\n            topic: \"homeassistant/computer/felixlaptop/lock/press\"\n        }, null];\n    }\n}\n\n// Update the status of the enforce lock switch if needed\nreturn [null, {\n    payload: (sessionState === 'locked'),\n    enforce_state_update: true\n}];",
		"outputs": 2,
		"timeout": 0,
		"noerr": 0,
		"initialize": "// Initialize flow variables\nflow.set('enforce_lock_enabled', false);\nflow.set('session_state', 'unknown');\nflow.set('last_lock_time', 0);",
		"finalize": "",
		"libs": [],
		"x": 410,
		"y": 620,
		"wires": [
			[
				"session_lock_command"
			],
			[
				"enforce_lock_status"
			]
		]
	},
	{
		"id": "enforce_lock_status",
		"type": "switch",
		"z": "computer_volume_control",
		"name": "Only Status Updates",
		"property": "enforce_state_update",
		"propertyType": "msg",
		"rules": [
			{
				"t": "true"
			}
		],
		"checkall": "true",
		"repair": false,
		"outputs": 1,
		"x": 630,
		"y": 660,
		"wires": [
			[
				"enforce_lock_update"
			]
		]
	},
	{
		"id": "session_lock_command",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Send Lock Command",
		"topic": "",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 660,
		"y": 620,
		"wires": []
	},
	{
		"id": "enforce_lock_handler",
		"type": "function",
		"z": "computer_volume_control",
		"name": "Handle Enforce Lock Toggle",
		"func": "// Store the enforce lock state in flow context\nflow.set('enforce_lock_enabled', msg.payload === true);\n\n// Forward the MQTT message\nreturn {\n    payload: msg.payload ? \"ON\" : \"OFF\",\n    topic: \"homeassistant/computer/felixlaptop/enforce_lock/state\"\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 640,
		"y": 220,
		"wires": [
			[
				"enforce_lock_state_mqtt"
			]
		]
	},
	{
		"id": "enforce_lock_state_mqtt",
		"type": "mqtt out",
		"z": "computer_volume_control",
		"name": "Publish Enforce State",
		"topic": "",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 940,
		"y": 220,
		"wires": []
	},
	{
		"id": "hvac_climate_control",
		"type": "tab",
		"label": "HVAC Climate Control",
		"disabled": false,
		"info": "",
		"env": []
	},
	{
		"id": "sam_device_config",
		"type": "ha-device-config",
		"name": "Sam HVAC Controller",
		"hwVersion": "",
		"manufacturer": "Node-RED",
		"model": "Climate Control Display",
		"swVersion": "1.0"
	},
	{
		"id": "sam_temp_display_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "sam_device_config",
		"name": "Sam Temperature Display",
		"version": 6,
		"entityType": "sensor",
		"haConfig": [
			{
				"property": "name",
				"value": "Sam Temperature Display"
			},
			{
				"property": "icon",
				"value": "mdi:thermometer"
			},
			{
				"property": "device_class",
				"value": "temperature"
			},
			{
				"property": "unit_of_measurement",
				"value": "°C"
			},
			{
				"property": "state_class",
				"value": "measurement"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "sam_humidity_display_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "sam_device_config",
		"name": "Sam Humidity Display",
		"version": 6,
		"entityType": "sensor",
		"haConfig": [
			{
				"property": "name",
				"value": "Sam Humidity Display"
			},
			{
				"property": "icon",
				"value": "mdi:water-percent"
			},
			{
				"property": "device_class",
				"value": "humidity"
			},
			{
				"property": "unit_of_measurement",
				"value": "%"
			},
			{
				"property": "state_class",
				"value": "measurement"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "sam_temp_setpoint_entity",
		"type": "ha-entity-config",
		"server": "c8bf64e0.ee9788",
		"deviceConfig": "sam_device_config",
		"name": "Sam Temperature Setpoint",
		"version": 6,
		"entityType": "number",
		"haConfig": [
			{
				"property": "name",
				"value": "Sam Temperature Setpoint"
			},
			{
				"property": "icon",
				"value": "mdi:thermostat"
			},
			{
				"property": "entity_category",
				"value": "config"
			},
			{
				"property": "device_class",
				"value": "temperature"
			},
			{
				"property": "unit_of_measurement",
				"value": "°C"
			},
			{
				"property": "min_value",
				"value": "15"
			},
			{
				"property": "max_value",
				"value": "27"
			},
			{
				"property": "step_value",
				"value": "0.5"
			},
			{
				"property": "mode",
				"value": "slider"
			}
		],
		"resend": true,
		"debugEnabled": false
	},
	{
		"id": "sam_temp_display",
		"type": "ha-sensor",
		"z": "hvac_climate_control",
		"name": "Temperature Display",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "sam_temp_display_entity",
		"exposeAsEntityConfig": "",
		"state": "payload",
		"stateType": "msg",
		"outputProperties": [],
		"x": 420,
		"y": 80,
		"wires": [
			[]
		]
	},
	{
		"id": "sam_humidity_display",
		"type": "ha-sensor",
		"z": "hvac_climate_control",
		"name": "Humidity Display",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "sam_humidity_display_entity",
		"exposeAsEntityConfig": "",
		"state": "payload",
		"stateType": "msg",
		"outputProperties": [],
		"x": 420,
		"y": 140,
		"wires": [
			[]
		]
	},
	{
		"id": "sam_temp_setpoint",
		"type": "ha-number",
		"z": "hvac_climate_control",
		"name": "Temperature Setpoint",
		"version": 1,
		"debugenabled": false,
		"inputs": 1,
		"outputs": 1,
		"entityConfig": "sam_temp_setpoint_entity",
		"exposeAsEntityConfig": "",
		"mode": "both",
		"value": "payload",
		"valueType": "msg",
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "value"
			},
			{
				"property": "previousValue",
				"propertyType": "msg",
				"value": "",
				"valueType": "previousValue"
			}
		],
		"x": 430,
		"y": 220,
		"wires": [
			[
				"update_ha_setpoint"
			]
		]
	},
	{
		"id": "temp_monitor",
		"type": "server-state-changed",
		"z": "hvac_climate_control",
		"name": "Temperature Monitor",
		"server": "c8bf64e0.ee9788",
		"version": 6,
		"outputs": 1,
		"exposeAsEntityConfig": "",
		"entities": [
			{
				"entityId": "sensor.t_h_sensor_temperature",
				"entityIdType": "exact"
			}
		],
		"outputInitially": true,
		"stateType": "str",
		"ifState": "",
		"ifStateType": "str",
		"ifStateOperator": "is",
		"outputOnlyOnStateChange": true,
		"for": "0",
		"forType": "num",
		"forUnits": "minutes",
		"ignorePrevStateNull": false,
		"ignorePrevStateUnknown": false,
		"ignorePrevStateUnavailable": false,
		"ignoreCurrentStateUnknown": false,
		"ignoreCurrentStateUnavailable": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "entityState"
			}
		],
		"x": 160,
		"y": 80,
		"wires": [
			[
				"format_temp_value"
			]
		]
	},
	{
		"id": "humidity_monitor",
		"type": "server-state-changed",
		"z": "hvac_climate_control",
		"name": "Humidity Monitor",
		"server": "c8bf64e0.ee9788",
		"version": 6,
		"outputs": 1,
		"exposeAsEntityConfig": "",
		"entities": [
			{
				"entityId": "sensor.t_h_sensor_humidity",
				"entityIdType": "exact"
			}
		],
		"outputInitially": true,
		"stateType": "str",
		"ifState": "",
		"ifStateType": "str",
		"ifStateOperator": "is",
		"outputOnlyOnStateChange": true,
		"for": "0",
		"forType": "num",
		"forUnits": "minutes",
		"ignorePrevStateNull": false,
		"ignorePrevStateUnknown": false,
		"ignorePrevStateUnavailable": false,
		"ignoreCurrentStateUnknown": false,
		"ignoreCurrentStateUnavailable": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "entityState"
			}
		],
		"x": 160,
		"y": 140,
		"wires": [
			[
				"format_humidity_value"
			]
		]
	},
	{
		"id": "setpoint_monitor",
		"type": "server-state-changed",
		"z": "hvac_climate_control",
		"name": "Setpoint Monitor",
		"server": "c8bf64e0.ee9788",
		"version": 6,
		"outputs": 1,
		"exposeAsEntityConfig": "",
		"entities": [
			{
				"entityId": "input_number.sam_desired_temperature",
				"entityIdType": "exact"
			}
		],
		"outputInitially": true,
		"stateType": "str",
		"ifState": "",
		"ifStateType": "str",
		"ifStateOperator": "is",
		"outputOnlyOnStateChange": true,
		"for": "0",
		"forType": "num",
		"forUnits": "minutes",
		"ignorePrevStateNull": false,
		"ignorePrevStateUnknown": false,
		"ignorePrevStateUnavailable": false,
		"ignoreCurrentStateUnknown": false,
		"ignoreCurrentStateUnavailable": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "entityState"
			}
		],
		"x": 160,
		"y": 220,
		"wires": [
			[
				"format_setpoint_value"
			]
		]
	},
	{
		"id": "format_temp_value",
		"type": "function",
		"z": "hvac_climate_control",
		"name": "Format Temperature",
		"func": "// Format temperature value for display\nlet temp = parseFloat(msg.payload);\nif (isNaN(temp)) {\n    temp = 0;\n}\n\n// Round to 1 decimal place\ntemp = Math.round(temp * 10) / 10;\n\nreturn {\n    payload: temp\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 270,
		"y": 80,
		"wires": [
			[
				"sam_temp_display",
				"mqtt_temp_update"
			]
		]
	},
	{
		"id": "format_humidity_value",
		"type": "function",
		"z": "hvac_climate_control",
		"name": "Format Humidity",
		"func": "// Format humidity value for display\nlet humidity = parseFloat(msg.payload);\nif (isNaN(humidity)) {\n    humidity = 0;\n}\n\n// Round to nearest integer\nhumidity = Math.round(humidity);\n\nreturn {\n    payload: humidity\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 270,
		"y": 140,
		"wires": [
			[
				"sam_humidity_display",
				"mqtt_humidity_update"
			]
		]
	},
	{
		"id": "format_setpoint_value",
		"type": "function",
		"z": "hvac_climate_control",
		"name": "Format Setpoint",
		"func": "// Format setpoint value for display\nlet setpoint = parseFloat(msg.payload);\nif (isNaN(setpoint)) {\n    setpoint = 20; // default value\n}\n\n// Ensure it's within range\nsetpoint = Math.max(15, Math.min(27, setpoint));\n\n// Round to 0.5 degree increments\nsetpoint = Math.round(setpoint * 2) / 2;\n\nreturn {\n    payload: setpoint\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 270,
		"y": 220,
		"wires": [
			[
				"sam_temp_setpoint"
			]
		]
	},
	{
		"id": "update_ha_setpoint",
		"type": "api-call-service",
		"z": "hvac_climate_control",
		"name": "Update HA Setpoint",
		"server": "c8bf64e0.ee9788",
		"version": 7,
		"debugenabled": false,
		"action": "input_number.set_value",
		"floorId": [],
		"areaId": [],
		"deviceId": [],
		"entityId": [],
		"labelId": [],
		"data": "{\"entity_id\": \"input_number.sam_desired_temperature\", \"value\": $number($$.payload)}",
		"dataType": "jsonata",
		"mergeContext": "",
		"mustacheAltTags": false,
		"outputProperties": [],
		"queue": "none",
		"blockInputOverrides": false,
		"domain": "input_number",
		"service": "set_value",
		"x": 680,
		"y": 220,
		"wires": [
			[
				"mqtt_setpoint_update"
			]
		]
	},
	{
		"id": "climate_state_monitor",
		"type": "server-state-changed",
		"z": "hvac_climate_control",
		"name": "Climate State Monitor",
		"server": "c8bf64e0.ee9788",
		"version": 6,
		"outputs": 1,
		"exposeAsEntityConfig": "",
		"entities": [
			{
				"entityId": "climate.sam",
				"entityIdType": "exact"
			}
		],
		"outputInitially": true,
		"stateType": "str",
		"ifState": "",
		"ifStateType": "str",
		"ifStateOperator": "is",
		"outputOnlyOnStateChange": true,
		"for": "0",
		"forType": "num",
		"forUnits": "minutes",
		"ignorePrevStateNull": false,
		"ignorePrevStateUnknown": false,
		"ignorePrevStateUnavailable": false,
		"ignoreCurrentStateUnknown": false,
		"ignoreCurrentStateUnavailable": false,
		"outputProperties": [
			{
				"property": "payload",
				"propertyType": "msg",
				"value": "",
				"valueType": "entityState"
			},
			{
				"property": "attributes",
				"propertyType": "msg",
				"value": "",
				"valueType": "entity"
			}
		],
		"x": 170,
		"y": 300,
		"wires": [
			[
				"format_climate_data"
			]
		]
	},
	{
		"id": "format_climate_data",
		"type": "function",
		"z": "hvac_climate_control",
		"name": "Format Climate Data",
		"func": "// Extract climate information for MQTT publishing\nconst state = msg.payload;\nconst attrs = msg.attributes || {};\n\nconst climateData = {\n    state: state,\n    current_temperature: attrs.current_temperature || null,\n    target_temperature: attrs.temperature || null,\n    hvac_mode: attrs.hvac_mode || 'off',\n    hvac_action: attrs.hvac_action || 'idle',\n    fan_mode: attrs.fan_mode || null,\n    preset_mode: attrs.preset_mode || null\n};\n\nreturn {\n    payload: JSON.stringify(climateData),\n    topic: \"homeassistant/climate/sam/state\"\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 410,
		"y": 300,
		"wires": [
			[
				"mqtt_climate_update"
			]
		]
	},
	{
		"id": "mqtt_temp_update",
		"type": "mqtt out",
		"z": "hvac_climate_control",
		"name": "Temperature MQTT",
		"topic": "homeassistant/sensor/sam/temperature/state",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 640,
		"y": 80,
		"wires": []
	},
	{
		"id": "mqtt_humidity_update",
		"type": "mqtt out",
		"z": "hvac_climate_control",
		"name": "Humidity MQTT",
		"topic": "homeassistant/sensor/sam/humidity/state",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 640,
		"y": 140,
		"wires": []
	},
	{
		"id": "mqtt_setpoint_update",
		"type": "mqtt out",
		"z": "hvac_climate_control",
		"name": "Setpoint MQTT",
		"topic": "homeassistant/number/sam/setpoint/state",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 920,
		"y": 220,
		"wires": []
	},
	{
		"id": "mqtt_climate_update",
		"type": "mqtt out",
		"z": "hvac_climate_control",
		"name": "Climate MQTT",
		"topic": "",
		"qos": "2",
		"retain": "",
		"respTopic": "",
		"contentType": "",
		"userProps": "",
		"correl": "",
		"expiry": "",
		"broker": "93e8dd50b41a1c38",
		"x": 630,
		"y": 300,
		"wires": []
	},
	{
		"id": "mqtt_setpoint_command",
		"type": "mqtt in",
		"z": "hvac_climate_control",
		"name": "Setpoint Commands",
		"topic": "homeassistant/number/sam/setpoint/command",
		"qos": "2",
		"datatype": "auto-detect",
		"broker": "93e8dd50b41a1c38",
		"nl": false,
		"rap": false,
		"inputs": 0,
		"x": 170,
		"y": 380,
		"wires": [
			[
				"handle_setpoint_command"
			]
		]
	},
	{
		"id": "handle_setpoint_command",
		"type": "function",
		"z": "hvac_climate_control",
		"name": "Handle Setpoint Command",
		"func": "// Handle incoming setpoint commands from MQTT\nlet setpoint = parseFloat(msg.payload);\nif (isNaN(setpoint)) {\n    return null;\n}\n\n// Ensure it's within range\nsetpoint = Math.max(15, Math.min(27, setpoint));\n\n// Round to 0.5 degree increments\nsetpoint = Math.round(setpoint * 2) / 2;\n\nreturn {\n    payload: setpoint\n};",
		"outputs": 1,
		"timeout": 0,
		"noerr": 0,
		"initialize": "",
		"finalize": "",
		"libs": [],
		"x": 440,
		"y": 380,
		"wires": [
			[
				"update_ha_setpoint"
			]
		]
	}
]
